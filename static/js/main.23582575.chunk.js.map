{"version":3,"sources":["reportWebVitals.js","components/toast/toastMessage.js","pages/header.js","components/login/login.js","images/banner.jpg","images/grad1.jpg","components/App.js","pages/about.js","components/login/register.js","pages/pageNotFound.js","components/jobs/static.js","components/jobs/useJob.js","components/jobs/createJob.js","components/jobs/applyJob.js","components/jobs/jobs.js","routes/history.js","routes/route.js","redux/loginReducer.js","redux/rootReducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ToastMessage","props","state","toast","configure","message","Component","Header","useSelector","login","dispatch","useDispatch","className","to","isLoggedIn","onClick","type","payLoad","UserLogin","history","emailRef","useRef","passwdRef","useState","emailError","setEmailError","passwdError","setPasswsError","useEffect","isRegistered","notify","formValidation","refName","email","errorCount","current","value","trim","test","String","toLowerCase","htmlFor","placeholder","name","ref","onChange","required","autoComplete","push","href","App","id","src","banner","alt","About","Registration","fullNameRef","contactRef","addressRef","jobRef","jobLocationRef","confirmPasswdRef","userType","setUserType","setPasswdError","fullNameError","setFullNameError","contactError","setContactError","courseError","setCourseError","branchError","setBranchError","addressError","setAddressError","jobError","setJobError","jobLocationError","setJobLocationError","confirmPasswdError","setConfirmPasswdError","passedOutYearError","setPassedOutYearError","branch","setBranch","course","setCourse","poyear","setPoyear","length","getTabClassName","tabNumber","role","data-toggle","e","maxLength","rows","currentTarget","map","eachYear","index","eachBranch","eachCourse","PageNotFound","jobs","postedBy","companyName","location","experience","skills","package","JobContext","createContext","JobContextProvider","jobsList","setJobs","Provider","children","CreateJob","closePopup","companyNameRef","locationRef","experienceRef","skillsRef","packageRef","companyNameError","setCompanyNameError","locationError","setLocationError","experienceError","setExperienceError","skillsError","setSkillsError","packageError","setPackageError","jobContextValue","useContext","newJob","oldArray","handleSubmit","ApplyJob","resumeRef","resumeError","setResumeError","Jobs","openCreateJobPopup","setOpenCreateJobPopup","openApplyJobPopup","setOpenApplyJobPopup","status","eachJob","createBrowserHistory","Routes","exact","path","component","React","initialState","LoginReducer","action","RootReducer","combineReducers","rootElement","document","getElementById","store","createStore","renderApp","render"],"mappings":"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","file":"static/js/main.23582575.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {React,Component} from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport './toast.css';\r\n\r\nclass Toast extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n        };\r\n        toast.configure();\r\n    }\r\n    \r\n    notify(message) {\r\n        toast(message);\r\n    };\r\n\r\n    render() { \r\n        return ( <></> );\r\n    }\r\n}\r\n\r\nconst ToastMessage = new Toast();\r\nexport default ToastMessage;\r\n\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/App.css';\r\n\r\nexport default function Header() {\r\n    const state = useSelector(state => state.login);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n            <div className=\"logo\">\r\n                <Link to=\"/\" className=\"navbar-brand\">\r\n                    Alumni Management system\r\n                </Link>\r\n            </div>\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/home\" className=\"nav-link\">Home</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">Home</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">About</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/jobs\" className=\"nav-link\">Jobs</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">Jobs</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    {\r\n                        !state.isLoggedIn &&\r\n                        <Link to=\"/login\" className=\"nav-link\">Login</Link>\r\n                    }\r\n                    {/* <a className=\"nav-link\" href=\"#\">Login</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/register\" className=\"nav-link\">Register</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">Register</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    {\r\n                        state.isLoggedIn &&\r\n                        <Link to=\"/\" className=\"nav-link\" onClick={() => dispatch({ type: \"USER_LOGOUT\", payLoad: false })}>Logout</Link>\r\n                    }\r\n                    {/* <a className=\"nav-link\" href=\"#\">Login</a> */}\r\n                </li>\r\n\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import { useState, useRef, useEffect } from \"react\";\r\nimport ToastMessage from '../toast/toastMessage';\r\nimport Header from '../../pages/header';\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport './login.css';\r\n\r\nexport default function UserLogin({ history }) {\r\n    const emailRef = useRef(\"\");\r\n    const passwdRef = useRef(\"\");\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [passwdError, setPasswsError] = useState(\"\");\r\n\r\n    const state = useSelector(state=>state.login)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(state.isRegistered){\r\n          ToastMessage.notify(\"Registered Successfully.Please Login..\");\r\n        }         \r\n    },[state.isRegistered])\r\n\r\n    // Validate Email Address\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"emailRef\": {\r\n\r\n                if (!emailRef || !emailRef.current || !emailRef.current.value || (emailRef && emailRef.current.value.trim() === \"\")) {\r\n                    setEmailError(\"Please Enter Email Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (!validateEmail(emailRef.current.value.trim())) {\r\n                    setEmailError(\"Invalid Email ID\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setEmailError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"passwdRef\": {\r\n                if (!passwdRef || !passwdRef.current || !passwdRef.current.value || (passwdRef && passwdRef.current.value.trim() === \"\")) {\r\n                    setPasswsError(\"Please Enter Password\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setPasswsError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return errorCount === 0 ? true : false;\r\n\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            dispatch({ type: \"USER_LOGIN\", payLoad: true });\r\n            history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"full-screen\">\r\n\r\n                <div className=\"imgcontainer\">\r\n                    <h3>Login</h3>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    {/** Email Address */}\r\n                    <div>\r\n                        <label htmlFor=\"uname\"><b>Email ID</b></label>\r\n                        <input type=\"text\" placeholder=\"Enter Email\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required autoComplete={\"off\"}/>\r\n                        <span className=\"error_msg\">{emailError && emailError}</span>\r\n                    </div>\r\n\r\n                    {/** Password */}\r\n                    <div>\r\n                        <label htmlFor=\"psw\"><b>Password</b></label>\r\n                        <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" ref={passwdRef} onChange={() => formValidation('passwdRef')} required autoComplete={\"off\"} />\r\n                        <span className=\"error_msg\">{passwdError && passwdError}</span>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" onClick={() => handleSubmit()}>Login</button>\r\n                    {/* <label>\r\n                    <input type=\"checkbox\" checked=\"checked\" name=\"remember\" /> Remember me\r\n                </label> */}\r\n                </div>\r\n\r\n                <div className=\"login-footer\">\r\n                    <span className=\"psw\">New User?<Link to=\"/login\">Register Here</Link></span>\r\n                    <span className=\"psw\"><a href=\"#\">Forgot password?</a></span>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/banner.a432192d.jpg\";","export default __webpack_public_path__ + \"static/media/grad1.942c2ecf.jpg\";","import '../css/App.css';\r\nimport Header from '../pages/header';\r\nimport banner from '../images/banner.jpg';\r\nimport {useEffect} from 'react';\r\nimport ToastMessage from './toast/toastMessage';\r\nimport { useSelector } from 'react-redux';\r\nimport CarouselComponent from '../pages/carousel';\r\n\r\nfunction App() {\r\n  const state = useSelector(state=>state.login)\r\n  \r\n  useEffect(() => {\r\n    if(state.isLoggedIn){\r\n      ToastMessage.notify(\"Logged In Successfully\");\r\n    } \r\n    // else{\r\n    //   ToastMessage.notify(\"Logged Out Successfully\")\r\n    // }\r\n    \r\n  },[state.isLoggedIn])\r\n  return (\r\n    <div className=\"App\" id='body-div'>\r\n      <Header />\r\n      <div>\r\n        {/* <CarouselComponent /> */}\r\n        <img src={banner} className=\"home-banner\" alt=\"banner\" />\r\n        <h2 className=\"home-heading\">Welcome To Alumni Management System</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import Header from \"./header\";\r\nexport default function About() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div>\r\n                <h2>About Website</h2>\r\n                <p>The Main Objective of Online Alumni Management Portal is to maintain communication between the students who graduated from this college and students studying in this college to know about each other’s current activities. It helps to know and allow the alumni to participate in the events and trainings that are conducted at the college. Alumni students can post current opportunities for the students  students can apply for it. Nowadays ,it is very difficult to communicate with our seniors without knowing any details about them, and the only way is to contact college  for their activities, to avoid this, we are creating a web application where the current students and passed out students have to register and update their details, through which we can establish a connection between them and also they can also organize meet ups. They can have friendly environment by posting their thoughts and ideas which helps in developing their future plans.   </p>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useState, useRef, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Header from '../../pages/header';\r\nimport './login.css';\r\n\r\nexport default function Registration({history}) {\r\n    // Student And Alumni Details\r\n    const emailRef = useRef(\"\");\r\n    const passwdRef = useRef(\"\");\r\n    const fullNameRef = useRef(\"\");\r\n    const contactRef = useRef(\"\");\r\n    const addressRef = useRef(\"\");\r\n    const jobRef = useRef(\"\"); // Alumni\r\n    const jobLocationRef = useRef(\"\"); // Alumni\r\n    const confirmPasswdRef = useRef(\"\");\r\n    const [userType, setUserType] = useState(1); // Default Student\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [passwdError, setPasswdError] = useState(\"\");\r\n    const [fullNameError, setFullNameError] = useState(\"\");\r\n    const [contactError, setContactError] = useState(\"\");\r\n    const [courseError, setCourseError] = useState(\"\");\r\n    const [branchError, setBranchError] = useState(\"\");\r\n    const [addressError, setAddressError] = useState(\"\");\r\n    const [jobError, setJobError] = useState(\"\");\r\n    const [jobLocationError, setJobLocationError] = useState(\"\");\r\n    const [confirmPasswdError, setConfirmPasswdError] = useState(\"\");\r\n    const [passedOutYearError, setPassedOutYearError] = useState(\"\");\r\n\r\n    const [branch, setBranch] = useState(\"\");\r\n    const [course, setCourse] = useState(\"\");\r\n    const [poyear, setPoyear] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    // Validate Email Address\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"emailRef\": {\r\n                if (!emailRef || !emailRef.current || !emailRef.current.value || (emailRef && emailRef.current.value.trim() === \"\")) {\r\n                    setEmailError(\"Enter Email Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (!validateEmail(emailRef.current.value.trim())) {\r\n                    setEmailError(\"Invalid Email ID\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setEmailError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"passwdRef\": {\r\n                if (!passwdRef || !passwdRef.current || !passwdRef.current.value || (passwdRef && passwdRef.current.value.trim() === \"\")) {\r\n                    setPasswdError(\"Enter Password\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setPasswdError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"confirmPasswdRef\": {\r\n                if (!confirmPasswdRef || !confirmPasswdRef.current || !confirmPasswdRef.current.value || (confirmPasswdRef && confirmPasswdRef.current.value.trim() === \"\")) {\r\n                    setConfirmPasswdError(\"Confirm Password\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setConfirmPasswdError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"fullNameRef\": {\r\n                if (!fullNameRef || !fullNameRef.current || !fullNameRef.current.value || (fullNameRef && fullNameRef.current.value.trim().length === 0)) {\r\n                    setFullNameError(\"Enter Full Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (fullNameRef.current.value && !((/^[a-zA-Z ]+$/).test(fullNameRef.current.value.trim()))) {\r\n                    setFullNameError('Enter alphabets only');\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setFullNameError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"contactRef\": {\r\n                if (!contactRef || !contactRef.current || !contactRef.current.value || (contactRef && contactRef.current.value.trim() === (\"\" || null))) {\r\n                    setContactError(\"Enter Contact Number\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (contactRef.current.value.trim().length < 10 || contactRef.current.value.trim().length > 10) {\r\n                    setContactError('Contact number must have 10 digits');\r\n                    errorCount = errorCount + 1;\r\n                } else if ((/^[0-9]*$/).test(contactRef.current.value.trim())) {\r\n                    setContactError(\"\");\r\n                } else {\r\n                    setContactError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"courseRef\": {\r\n                if (course === \"\" || course == \"Course\") {\r\n                    setCourseError(\"Enter Course Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setCourseError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"branchRef\": {\r\n                if (branch === \"\" || branch == \"Branch\") {\r\n                    setBranchError(\"Select Branch\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setBranchError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"addressRef\": {\r\n                if (!addressRef || !addressRef.current || !addressRef.current.value || (addressRef && addressRef.current.value.trim() === \"\")) {\r\n                    setAddressError(\"Enter Full Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setAddressError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"jobRef\": {\r\n                if (userType && userType == 2) {\r\n                    if (!jobRef || !jobRef.current || !jobRef.current.value || (jobRef && jobRef.current.value.trim().length === 0)) {\r\n                        setJobError(\"Enter Occupation\");\r\n                        errorCount = errorCount + 1;\r\n                    } else if (jobRef.current.value && !((/^[a-zA-Z ]+$/).test(jobRef.current.value.trim()))) {\r\n                        setJobError('Enter alphabets only');\r\n                        errorCount = errorCount + 1;\r\n                    } else {\r\n                        setJobError(\"\");\r\n                    }\r\n                    if (refName !== \"all\") {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            case \"jobLocationRef\": {\r\n                if (userType && userType == 2) {\r\n                    if (!jobLocationRef || !jobLocationRef.current || !jobLocationRef.current.value || (jobLocationRef && jobLocationRef.current.value.trim().length === 0)) {\r\n                        setJobLocationError(\"Enter Job Location\");\r\n                        errorCount = errorCount + 1;\r\n                    } else if (jobLocationRef.current.value && !((/^[a-zA-Z ]+$/).test(jobLocationRef.current.value.trim()))) {\r\n                        setJobLocationError('Enter alphabets only');\r\n                        errorCount = errorCount + 1;\r\n                    } else {\r\n                        setJobLocationError(\"\");\r\n                    }\r\n                    if (refName !== \"all\") {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            case \"passedOutYearRef\": {\r\n                if (userType && userType == 2) {\r\n                    if (poyear === \"\" || poyear == \"Year of Pass\") {\r\n                        setPassedOutYearError(\"Select PassedOut Year\");\r\n                        errorCount = errorCount + 1;\r\n                    } else {\r\n                        setPassedOutYearError(\"\");\r\n                    }\r\n                    if (refName !== \"all\") {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return errorCount === 0 ? true : false;\r\n\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            dispatch({ type: \"USER_REGISTRATION\", payLoad: true });\r\n            history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    const getTabClassName = (tabNumber) => {\r\n        return userType == tabNumber ? \" active\" : \"\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        setFullNameError(\"\");\r\n        setJobError(\"\");\r\n        setJobLocationError(\"\");\r\n        setBranchError(\"\");\r\n        setEmailError(\"\");\r\n        setPassedOutYearError(\"\");\r\n        setPasswdError(\"\");\r\n        setContactError(\"\");\r\n        setConfirmPasswdError(\"\");\r\n        setCourseError(\"\");\r\n        setAddressError(\"\");\r\n    }, [userType]);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"full-screen mxw-500\">\r\n\r\n                <div className=\"imgcontainer\">\r\n                    <h3>Register</h3>\r\n                </div>\r\n\r\n                {/** User Type Tabs */}\r\n\r\n                <div className=\"container\">\r\n                    {/** Nav tabs */}\r\n                    <ul className=\"nav nav-tabs nav-justified\" role=\"tablist\">\r\n                        <li className=\"nav-item\">\r\n                            <a className={\"nav-link\" + getTabClassName(1)} data-toggle=\"tab\" href=\"#tab1\" onClick={(e) => {\r\n                                setUserType(1)\r\n                            }}\r\n                            >Student</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className={\"nav-link\" + getTabClassName(2)} data-toggle=\"tab\" href=\"#tab1\" onClick={() => setUserType(2)}>Alumni</a>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    {/**  Tab panes */}\r\n                    <div className=\"tab-content\">\r\n                        <div id=\"tab1\" className=\"container tab-pane active\"><br />\r\n                            {/** Full Name */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Full Name</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Full Name\" name=\"uname\" ref={fullNameRef} onChange={() => formValidation('fullNameRef')} required autoComplete={\"off\"} maxLength={20}/>\r\n                                <span className=\"error_msg\">{fullNameError && fullNameError}</span>\r\n                            </div>\r\n\r\n                            {/** Email Address */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Email ID</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Email\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required autoComplete={\"off\"} maxLength={30}/>\r\n                                <span className=\"error_msg\">{emailError && emailError}</span>\r\n                            </div>\r\n                            {/** Contact no */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Contact No</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Contact Number\" name=\"uname\" ref={contactRef} onChange={() => formValidation('contactRef')} required autoComplete={\"off\"} maxLength={10} />\r\n                                <span className=\"error_msg\">{contactError && contactError}</span>\r\n                            </div>\r\n\r\n                            {/** Address */}\r\n                            <div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"uname\"><b>Address</b></label>\r\n                                    <textarea className=\"form-control\" placeholder=\"Enter Address\" rows=\"5\" id=\"comment\" ref={addressRef} onChange={() => formValidation('addressRef')} required autoComplete={\"off\"} maxLength={150}></textarea>\r\n                                    <span className=\"error_msg\">{addressError && addressError}</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** Job */}\r\n                            {userType && userType == 2 &&\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Occupation</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Occupation\" name=\"uname\" ref={jobRef} onChange={() => formValidation('jobRef')} required autoComplete={\"off\"} maxLength={20}/>\r\n                                    <span className=\"error_msg\">{jobError && jobError}</span>\r\n                                </div>}\r\n\r\n                            {/** Job Location */}\r\n                            {userType && userType == 2 &&\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Job Location</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Job Location\" name=\"uname\" ref={jobLocationRef} onChange={() => formValidation('jobLocationRef')} required autoComplete={\"off\"} maxLength={20}/>\r\n                                    <span className=\"error_msg\">{jobLocationError && jobLocationError}</span>\r\n                                </div>}\r\n\r\n                            {/** Passed Out Year */} {/** Branch */}{/** Course */}\r\n                            <>\r\n                                <div className=\"dropdown-signup\">\r\n                                    {userType && userType == 2 &&\r\n                                        <div className=\"btn-group\">\r\n\r\n\r\n                                            <select className=\"btn btn-secondary dropdown-toggle\" onChange={(e) => { setPoyear(e.currentTarget.value);setPassedOutYearError(\"\") }}>\r\n                                                <option>Year of Pass</option>\r\n                                                {\r\n                                                    [2020, 2019, 2018, 2017, 2016].map((eachYear, index) => {\r\n                                                        return <option key={index} value={eachYear}>{eachYear}</option>\r\n                                                    })\r\n                                                }\r\n                                            </select>\r\n                                        </div>}\r\n\r\n                                    <div className=\"btn-group\">\r\n                                        <select className=\"btn btn-secondary dropdown-toggle\" onChange={(e) => { setBranch(e.currentTarget.value); setBranchError(\"\"); }}>\r\n                                            <option>Branch</option>\r\n                                            {\r\n                                                [\"CSE\", \"ECE\", \"EEE\", \"CE\", \"ME\"].map((eachBranch, index) => {\r\n                                                    return <option key={index} value={eachBranch}>{eachBranch}</option>\r\n                                                })\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"btn-group\">\r\n                                        <select className=\"btn btn-secondary dropdown-toggle\" onChange={(e) => { setCourse(e.currentTarget.value);setCourseError(\"\")}}>\r\n                                            <option>Course</option>\r\n                                            {\r\n                                                [\"BTech\", \"BE\", \"MS\", \"MTech\", \"MBA\"].map((eachCourse, index) => {\r\n                                                    return <option key={index} value={eachCourse}>{eachCourse}</option>\r\n                                                })\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-signup\">\r\n                                    <span className=\"error_msg\">{passedOutYearError && passedOutYearError}</span>\r\n                                    <span className=\"error_msg\">{branchError && branchError}</span>\r\n                                    <span className=\"error_msg\">{courseError && courseError}</span>\r\n                                </div> </>\r\n\r\n                            {/** Password */}\r\n                            <div>\r\n                                <label htmlFor=\"psw\"><b>Password</b></label>\r\n                                <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" ref={passwdRef} onChange={() => formValidation('passwdRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{passwdError && passwdError}</span>\r\n                            </div>\r\n                            {/** Confirm Password */}\r\n                            <div>\r\n                                <label htmlFor=\"psw\"><b>Confirm Password</b></label>\r\n                                <input type=\"password\" placeholder=\"Confirm Password\" name=\"psw\" ref={confirmPasswdRef} onChange={() => formValidation('confirmPasswdRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{confirmPasswdError && confirmPasswdError}</span>\r\n                            </div>\r\n\r\n                            <button type=\"submit\" onClick={() => handleSubmit()}>Signup</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}","import Header from \"./header\";\r\n\r\nexport default function PageNotFound() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div>\r\n                <h2>404 !! Page Not Found</h2>\r\n            </div>\r\n        </>\r\n    );\r\n}","const jobs=[\r\n    {\r\n        postedBy: \"Harika\",\r\n        companyName:\"Tech Mahendra\",\r\n        location:\"Banglaore\",\r\n        experience:\"0-1 years\",\r\n        skills:\"Html, CSS, Javascript\",\r\n        package:\"3.5 LPA\"\r\n    },\r\n    {\r\n        postedBy: \"Nimish\",\r\n        companyName:\"Infosys\",\r\n        location:\"Hyderabad\",\r\n        experience:\"2-3 years\",\r\n        skills:\"C,Python\",\r\n        package:\"5 LPA\"\r\n    },\r\n    {\r\n        postedBy: \"Hari\",\r\n        companyName:\"TCS\",\r\n        location:\"Banglaore\",\r\n        experience:\"Freshers\",\r\n        skills:\"C,Java\",\r\n        package:\"4.0 LPA\"\r\n    },\r\n];\r\n\r\nexport default jobs;","import { createContext,useState} from 'react';\r\nimport jobsList from './static';\r\nexport const JobContext = createContext();\r\n// export function useDetails() {\r\n// \treturn useContext(JobContext);\r\n// }\r\nconst JobContextProvider=(props)=> {\r\n    const [jobs, setJobs] = useState(jobsList);\r\n    return (\r\n        <div>\r\n            <JobContext.Provider value={{ jobs,setJobs }}>\r\n                {props.children}\r\n            </JobContext.Provider>\r\n        </div>\r\n    );\r\n};\r\nexport default JobContextProvider;","import { useRef, useState, useContext } from \"react\";\r\nimport { JobContext } from \"./useJob\";\r\nexport default function CreateJob({closePopup}) {\r\n    // Student And Alumni Details\r\n    const companyNameRef = useRef(\"\");\r\n    const locationRef = useRef(\"\");\r\n    const experienceRef = useRef(\"\");\r\n    const skillsRef = useRef(\"\");\r\n    const packageRef = useRef(\"\");\r\n    const [companyNameError, setCompanyNameError] = useState(\"\");\r\n    const [locationError, setLocationError] = useState(\"\");\r\n    const [experienceError, setExperienceError] = useState(\"\");\r\n    const [skillsError, setSkillsError] = useState(\"\");\r\n    const [packageError, setPackageError] = useState(\"\");\r\n\r\n    const jobContextValue = useContext(JobContext);\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"companyNameRef\": {\r\n                if (!companyNameRef || !companyNameRef.current || !companyNameRef.current.value || (companyNameRef && companyNameRef.current.value.trim().length === 0)) {\r\n                    setCompanyNameError(\"Enter Company Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (companyNameRef.current.value && !((/^[a-zA-Z ]+$/).test(companyNameRef.current.value.trim()))) {\r\n                    setCompanyNameError('Enter alphabets only');\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setCompanyNameError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"locationRef\": {\r\n                if (!locationRef || !locationRef.current || !locationRef.current.value || (locationRef && locationRef.current.value.trim() === \"\")) {\r\n                    setLocationError(\"Enter Location\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (locationRef.current.value && !((/^[a-zA-Z ]+$/).test(locationRef.current.value.trim()))) {\r\n                    setLocationError('Enter alphabets only');\r\n                    errorCount = errorCount + 1;\r\n                }else {\r\n                    setLocationError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"experienceRef\": {\r\n                if (!experienceRef || !experienceRef.current || !experienceRef.current.value || (experienceRef && experienceRef.current.value.trim() === \"\")) {\r\n                    setExperienceError(\"Enter Required maxLength={30} Experience\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setExperienceError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"skillsRef\": {\r\n                if (!skillsRef || !skillsRef.current || !skillsRef.current.value || (skillsRef && skillsRef.current.value.trim() === \"\")) {\r\n                    setSkillsError(\"Enter Skills \");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setSkillsError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"packageRef\": {\r\n                if (!packageRef || !packageRef.current || !packageRef.current.value || (packageRef && packageRef.current.value.trim() === \"\")) {\r\n                    setPackageError(\"Enter Package\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setPackageError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return errorCount === 0 ? true : false;\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            let newJob={\r\n                postedBy: \"Harika\",\r\n                companyName:companyNameRef.current.value.trim(),\r\n                location:locationRef.current.value.trim(),\r\n                experience:experienceRef.current.value.trim(),\r\n                skills:skillsRef.current.value.trim(),\r\n                package:packageRef.current.value.trim()\r\n            };\r\n            jobContextValue.setJobs(oldArray=>[...oldArray,newJob]);\r\n            closePopup(true,\"post\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/**<!-- The Modal -->*/}\r\n            <div className=\"modal\" id=\"myModal\">\r\n                <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                    <div className=\"modal-content\">\r\n\r\n                        {/**<!-- Modal Header -->*/}\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title width-webkit\">Post A Job</h1>\r\n                            <button type=\"button\" className=\"close width-max\" onClick={()=> closePopup(false,\"post\")}>×</button>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal body -->*/}\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"container\">\r\n                                {/** Company Name */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Company Name</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Company Name\" name=\"uname\" ref={companyNameRef} onChange={() => formValidation('companyNameRef')} required maxLength={20} />\r\n                                    <span className=\"error_msg\">{companyNameError && companyNameError}</span>\r\n                                </div>\r\n\r\n                                {/** Company Location */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>Location</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Company's Location\" name=\"psw\" ref={locationRef} onChange={() => formValidation('locationRef')} required maxLength={20} />\r\n                                    <span className=\"error_msg\">{locationError && locationError}</span>\r\n                                </div>\r\n\r\n                                {/** Experience */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>Experience</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Experience\" name=\"psw\" ref={experienceRef} onChange={() => formValidation('experienceRef')} required maxLength={20} />\r\n                                    <span className=\"error_msg\">{experienceError && experienceError}</span>\r\n                                </div>\r\n                                {/** Skills */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>Skills</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter skills\" name=\"psw\" ref={skillsRef} onChange={() => formValidation('skillsRef')} required maxLength={40} />\r\n                                    <span className=\"error_msg\">{skillsError && skillsError}</span>\r\n                                </div>\r\n                                {/** Package */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>CTC</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter CTC P.A.\" name=\"psw\" ref={packageRef} onChange={() => formValidation('packageRef')} required maxLength={20} />\r\n                                    <span className=\"error_msg\">{packageError && packageError}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal footer -->*/}\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"submit\" className=\"btn btn-success btn-popup\" onClick={() => handleSubmit()}>Post</button>\r\n                            <button type=\"button\" className=\"btn btn-danger btn-popup\" onClick={()=> closePopup(false,\"post\")}>Close</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useRef, useState } from \"react\";\r\nimport './jobs.css';\r\nexport default function ApplyJob({closePopup}) {\r\n    // Student And Alumni Details\r\n    const resumeRef = useRef(\"\");\r\n    const emailRef = useRef(\"\");\r\n    const fullNameRef = useRef(\"\");\r\n    const contactRef = useRef(\"\");\r\n\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [fullNameError, setFullNameError] = useState(\"\");\r\n    const [contactError, setContactError] = useState(\"\");\r\n    const [resumeError, setResumeError] = useState(\"\");\r\n\r\n    // Validate Email Address\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"emailRef\": {\r\n                if (!emailRef || !emailRef.current || !emailRef.current.value || (emailRef && emailRef.current.value.trim() === \"\")) {\r\n                    setEmailError(\"Enter Email Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (!validateEmail(emailRef.current.value.trim())) {\r\n                    setEmailError(\"Invalid Email ID\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setEmailError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"fullNameRef\": {\r\n                if (!fullNameRef || !fullNameRef.current || !fullNameRef.current.value || (fullNameRef && fullNameRef.current.value.trim().length === 0)) {\r\n                    setFullNameError(\"Enter Full Name\");\r\n                    errorCount = errorCount + 1;\r\n                }  else if (fullNameRef.current.value && !((/^[a-zA-Z ]+$/).test(fullNameRef.current.value.trim()))) {\r\n                    setFullNameError('Enter alphabets only');\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setFullNameError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"contactRef\": {\r\n                if (!contactRef || !contactRef.current || !contactRef.current.value || (contactRef && contactRef.current.value.trim() === (\"\" || null))) {\r\n                    setContactError(\"Enter Contact Number\");\r\n                    errorCount = errorCount + 1;\r\n                }else if (contactRef.current.value.trim().length < 10 || contactRef.current.value.trim().length > 10) {\r\n                    setContactError('Contact number must have 10 digits');\r\n                    errorCount = errorCount + 1;\r\n                }  else if ((/^[0-9]*$/).test(contactRef.current.value.trim())) {\r\n                    setContactError(\"\");\r\n                }else {\r\n                    setContactError('Invalid Phone Number');\r\n                    errorCount = errorCount + 1;\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"resumeRef\": {\r\n                if (!resumeRef || !resumeRef.current || !resumeRef.current.value || (resumeRef && resumeRef.current.value.trim() === \"\")) {\r\n                    setResumeError(\"Please Upload Resume\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setResumeError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return errorCount === 0 ? true : false;\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            closePopup(true,\"apply\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/**<!-- The Modal -->*/}\r\n            <div className=\"modal\" id=\"myModal\">\r\n                <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                    <div className=\"modal-content\">\r\n\r\n                        {/**<!-- Modal Header -->*/}\r\n                        <div className=\"modal-header\">\r\n                            <div className=\"width-webkit\">\r\n                                <h1 className=\"modal-title\">Apply For Job</h1>\r\n                            </div>\r\n                            <button type=\"button\" className=\"close width-fit\"  onClick={()=> closePopup(false,\"apply\")}>×</button>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal body -->*/}\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"container\">\r\n                                {/** Full Name */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Full Name</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Full Name\" name=\"uname\" ref={fullNameRef} onChange={() => formValidation('fullNameRef')} required maxLength={20} />\r\n                                    <span className=\"error_msg\">{fullNameError && fullNameError}</span>\r\n                                </div>\r\n\r\n                                {/** Email Address */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Email ID</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Email\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required maxLength={20} />\r\n                                    <span className=\"error_msg\">{emailError && emailError}</span>\r\n                                </div>\r\n\r\n                                {/** Contact no */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Contact No</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Contact Number\" name=\"uname\" ref={contactRef} onChange={() => formValidation('contactRef')} required maxLength={10} />\r\n                                    <span className=\"error_msg\">{contactError && contactError}</span>\r\n                                </div>\r\n                                {/** Resume Upload */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Resume</b></label>\r\n                                    <label htmlFor=\"formFileSm\" className=\"form-label\"></label>\r\n                                    <input className=\"form-control form-control-sm\" id=\"formFileSm\" type=\"file\" ref={resumeRef} onChange={()=>setResumeError(\"\")}/>\r\n                                    <span className=\"error_msg\">{resumeError && resumeError}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal footer -->*/}\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"submit\" className=\"btn btn-success btn-popup\" onClick={() => handleSubmit()}>Apply</button>\r\n                            <button type=\"button\" className=\"btn btn-danger btn-popup\" onClick={()=> closePopup(false,\"apply\")}>Close</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\nimport Header from \"../../pages/header\";\r\nimport './jobs.css';\r\nimport CreateJob from \"./createJob\";\r\nimport ApplyJob from \"./applyJob\";\r\nimport ToastMessage from \"../toast/toastMessage\";\r\nimport { JobContext } from \"./useJob\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function Jobs({ history }) {\r\n    const [openCreateJobPopup, setOpenCreateJobPopup] = useState(false);\r\n    const [openApplyJobPopup, setOpenApplyJobPopup] = useState(false);\r\n\r\n    const jobContextValue = useContext(JobContext);\r\n\r\n    const state = useSelector(state => state.login)\r\n\r\n    useEffect(() => {\r\n        if (!state.isLoggedIn) {\r\n            ToastMessage.notify(\"Please Login to Continue..\");\r\n            history.push(\"/login\");\r\n        }\r\n    }, [state.isLoggedIn])\r\n\r\n    const closePopup = (status, type) => {\r\n        if (type == \"post\") {\r\n            if (status) {\r\n                ToastMessage.notify(\"Job Posted Successfully\");\r\n            }\r\n            setOpenCreateJobPopup(false);\r\n        } else if (type == \"apply\") {\r\n            if (status) {\r\n                ToastMessage.notify(\"Applied to Job Successfully\");\r\n            }\r\n            setOpenApplyJobPopup(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"container jobs\">\r\n                <h2>Job Openings</h2>\r\n                <button type=\"button\" className=\"btn btn-primary width-max align-right\" data-toggle=\"modal\" onClick={() => setOpenCreateJobPopup(!openCreateJobPopup)}>Post A Job</button>\r\n\r\n                {\r\n                    jobContextValue.jobs.map((eachJob, index) => {\r\n                        return (\r\n                            <div className=\"each-job\" key={index}>\r\n                                <div className=\"job-header\">\r\n                                    <h4 className=\"posted-by\">Posted By {eachJob.postedBy}</h4>\r\n                                    <button type=\"button\" className=\"btn btn-primary width-max\" data-toggle=\"modal\" onClick={() => setOpenApplyJobPopup(!openApplyJobPopup)}>Apply For Job</button>\r\n                                </div>\r\n                                <div className=\"job-data\">\r\n                                    <p className=\"job-data-detail\">{eachJob.companyName}</p>\r\n                                    <p className=\"job-data-detail\">{eachJob.location}</p>\r\n                                    <p className=\"job-data-detail\">{eachJob.experience}</p>\r\n                                    <p className=\"job-data-detail\">Key Skills: {eachJob.skills}</p>\r\n                                    <p className=\"job-data-detail\">Pay Scale: {eachJob.package}</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n\r\n\r\n            </div>\r\n            {openCreateJobPopup && <CreateJob closePopup={(status, type) => closePopup(status, type)} />}\r\n            {openApplyJobPopup && <ApplyJob closePopup={(status, type) => closePopup(status, type)} />}\r\n        </>\r\n    );\r\n}","import { createBrowserHistory } from 'history';\r\nexport default createBrowserHistory(); ","import * as React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Route,\r\n    Switch,\r\n    Redirect,\r\n} from 'react-router-dom';\r\nimport UserLogin from '../components/login/login';\r\nimport App from '../components/App';\r\nimport About from '../pages/about';\r\nimport Registration from '../components/login/register';\r\nimport PageNotFound from '../pages/pageNotFound';\r\nimport Jobs from '../components/jobs/jobs';\r\nimport history from './history';\r\nimport JobContextProvider from '../components/jobs/useJob';\r\n\r\nclass Routes extends React.Component {\r\n    render() {\r\n        return (\r\n            <JobContextProvider>\r\n                <Router history={history}>\r\n                    <Switch>\r\n                        <Route exact path='/' component={App}></Route>\r\n                        <Route exact path='/home' component={App}></Route>\r\n                        <Route exact path='/about' component={About}></Route>\r\n                        <Route exact path='/register' component={Registration}></Route>\r\n                        <Route exact path='/login' component={UserLogin}></Route>\r\n                        <Route exact path='/jobs' component={Jobs}></Route>\r\n                        <Route exact path='/pageNotFound' component={PageNotFound}></Route>\r\n                        <Redirect to=\"/pageNotFound\"></Redirect>\r\n                    </Switch>\r\n                </Router>\r\n            </JobContextProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Routes;","const initialState={\r\n    isLoggedIn: false,\r\n    isRegistered: false\r\n};\r\n\r\nconst LoginReducer=(state=initialState, action)=>{\r\n    switch(action.type){\r\n        case \"USER_LOGIN\":{\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.payLoad\r\n            }\r\n        }\r\n        case \"USER_LOGOUT\":{\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.payLoad\r\n            }\r\n        }\r\n        case \"USER_REGISTRATION\":{\r\n            return {\r\n                ...state,\r\n                isRegistered: action.payLoad\r\n            }\r\n        }\r\n        default:{\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\nexport default LoginReducer;","import LoginReducer from \"./loginReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst RootReducer = combineReducers({\r\n    login: LoginReducer\r\n});\r\n\r\nexport default RootReducer;\r\n","import './css/index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Routes from './routes/route';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport RootReducer from './redux/rootReducer';\r\nimport { createStore } from 'redux';\r\n\r\n\r\n//root element of the project\r\nconst rootElement = document.getElementById('root');\r\n\r\n//Create Store\r\nconst store = createStore(RootReducer);\r\n\r\nexport function renderApp() {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <Routes />\r\n        </Provider>)\r\n}\r\nrender(renderApp(), (rootElement));\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}