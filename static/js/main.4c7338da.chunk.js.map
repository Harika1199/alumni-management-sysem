{"version":3,"sources":["reportWebVitals.js","header.js","login/login.js","banner.jpg","toastMessage.js","App.js","about.js","register.js","pageNotFound.js","jobs/createJob.js","jobs/applyJob.js","jobs/jobs.js","history.js","route.js","loginReducer.js","rootReducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","state","useSelector","login","dispatch","useDispatch","console","log","className","href","to","isLoggedIn","onClick","type","payLoad","UserLogin","history","emailRef","useRef","passwdRef","useState","emailError","setEmailError","passwdError","setPasswsError","formValidation","refName","email","errorCount","current","value","trim","test","String","toLowerCase","htmlFor","placeholder","name","ref","onChange","required","autoComplete","push","ToastMessage","props","toast","configure","message","Component","App","useEffect","notify","id","src","banner","alt","About","Registration","fullNameRef","contactRef","courseRef","branchRef","addressRef","jobRef","jobLocationRef","passedOutYearRef","confirmPasswdRef","userType","setUserType","setPasswdError","fullNameError","setFullNameError","contactError","setContactError","courseError","setCourseError","branchError","setBranchError","addressError","setAddressError","jobError","setJobError","jobLocationError","setJobLocationError","confirmPasswdError","setConfirmPasswdError","passedOutYearError","setPassedOutYearError","getTabClassName","tabNumber","role","data-toggle","e","map","eachYear","index","eachBranch","PageNotFound","CreateJob","companyNameRef","locationRef","experienceRef","skillsRef","packageRef","companyNameError","setCompanyNameError","locationError","setLocationError","experienceError","setExperienceError","skillsError","setSkillsError","packageError","setPackageError","data-dismiss","ApplyJob","resumeRef","resumeError","setResumeError","rerf","Jobs","openCreateJobPopup","setOpenCreateJobPopup","openApplyJobPopup","setOpenApplyJobPopup","data-target","createBrowserHistory","Routes","exact","path","component","React","initialState","LoginReducer","action","RootReducer","combineReducers","rootElement","document","getElementById","store","createStore","renderApp","render"],"mappings":"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","file":"static/js/main.4c7338da.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nexport default function Header() {\r\n    const state = useSelector(state => state.login);\r\n    const dispatch = useDispatch();\r\n\r\n    console.log(state);\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n            <div className=\"logo\">\r\n                <a className=\"navbar-brand\" href=\"/\">\r\n                    Alumni Management system\r\n                </a>\r\n            </div>\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">Home</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">About</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/jobs\" className=\"nav-link\">Jobs</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">Jobs</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    {\r\n                        !state.isLoggedIn &&\r\n                        <Link to=\"/login\" className=\"nav-link\">Login</Link>\r\n                    }\r\n                    {/* <a className=\"nav-link\" href=\"#\">Login</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/register\" className=\"nav-link\">Register</Link>\r\n                    {/* <a className=\"nav-link\" href=\"#\">Register</a> */}\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    {\r\n                        state.isLoggedIn &&\r\n                        <Link to=\"/\" className=\"nav-link\" onClick={() => dispatch({ type: \"USER_LOGOUT\", payLoad: false })}>Logout</Link>\r\n                    }\r\n                    {/* <a className=\"nav-link\" href=\"#\">Login</a> */}\r\n                </li>\r\n\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import { useState, useRef } from \"react\";\r\nimport Header from '../header';\r\nimport { useDispatch } from \"react-redux\";\r\nimport './login.css';\r\n\r\nexport default function UserLogin({ history }) {\r\n    const emailRef = useRef(\"\");\r\n    const passwdRef = useRef(\"\");\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [passwdError, setPasswsError] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Validate Email Address\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"emailRef\": {\r\n\r\n                if (!emailRef || !emailRef.current || !emailRef.current.value || (emailRef && emailRef.current.value.trim() === \"\")) {\r\n                    setEmailError(\"Please Enter Email Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (!validateEmail(emailRef.current.value.trim())) {\r\n                    setEmailError(\"Invalid Email ID\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setEmailError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"passwdRef\": {\r\n                if (!passwdRef || !passwdRef.current || !passwdRef.current.value || (passwdRef && passwdRef.current.value.trim() === \"\")) {\r\n                    setPasswsError(\"Please Enter Password\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setPasswsError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return errorCount === 0 ? true : false;\r\n\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            dispatch({ type: \"USER_LOGIN\", payLoad: true });\r\n            console.log(\"All fields are validated\");\r\n            history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"full-screen\">\r\n\r\n                <div className=\"imgcontainer\">\r\n                    <h3>Login</h3>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    {/** Email Address */}\r\n                    <div>\r\n                        <label htmlFor=\"uname\"><b>Email ID</b></label>\r\n                        <input type=\"text\" placeholder=\"Enter Email\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required autoComplete={\"off\"}/>\r\n                        <span className=\"error_msg\">{emailError && emailError}</span>\r\n                    </div>\r\n\r\n                    {/** Password */}\r\n                    <div>\r\n                        <label htmlFor=\"psw\"><b>Password</b></label>\r\n                        <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" ref={passwdRef} onChange={() => formValidation('passwdRef')} required autoComplete={\"off\"} />\r\n                        <span className=\"error_msg\">{passwdError && passwdError}</span>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" onClick={() => handleSubmit()}>Login</button>\r\n                    {/* <label>\r\n                    <input type=\"checkbox\" checked=\"checked\" name=\"remember\" /> Remember me\r\n                </label> */}\r\n                </div>\r\n\r\n                <div className=\"login-footer\">\r\n                    <span className=\"psw\"><a href=\"#\">Register</a></span>\r\n                    <span className=\"psw\"><a href=\"#\">Forgot password?</a></span>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/banner.a432192d.jpg\";","import {React,Component} from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport './toast.css';\r\n\r\nclass Toast extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n        };\r\n        toast.configure();\r\n    }\r\n    \r\n    notify(message) {\r\n        toast(message);\r\n    };\r\n\r\n    render() { \r\n        return ( <></> );\r\n    }\r\n}\r\n\r\nconst ToastMessage = new Toast();\r\nexport default ToastMessage;\r\n\r\n","import './App.css';\r\nimport Header from './header';\r\nimport banner from './banner.jpg';\r\nimport {useEffect} from 'react';\r\nimport ToastMessage from './toastMessage';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction App() {\r\n  const state = useSelector(state=>state.login)\r\n  \r\n  useEffect(() => {\r\n    if(state.isLoggedIn){\r\n      ToastMessage.notify(\"Logged In Successfully\");\r\n    } \r\n    // else{\r\n    //   ToastMessage.notify(\"Logged Out Successfully\")\r\n    // }\r\n    \r\n  },[state.isLoggedIn])\r\n  return (\r\n    <div className=\"App\" id='body-div'>\r\n      <Header />\r\n      <div>\r\n        <img src={banner} className=\"home-banner\" alt=\"banner\" />\r\n        <h2 className=\"home-heading\">Welcome To Alumni Management System</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import Header from \"./header\";\r\nexport default function About() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div>\r\n                <h2>About Website</h2>\r\n                <p>The Main Objective of Online Alumni Management Portal is to maintain communication between the students who graduated from this college and students studying in this college to know about each other’s current activities. It helps to know and allow the alumni to participate in the events and trainings that are conducted at the college. Alumni students can post current opportunities for the students  students can apply for it. Nowadays ,it is very difficult to communicate with our seniors without knowing any details about them, and the only way is to contact college  for their activities, to avoid this, we are creating a web application where the current students and passed out students have to register and update their details, through which we can establish a connection between them and also they can also organize meet ups. They can have friendly environment by posting their thoughts and ideas which helps in developing their future plans.   </p>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useState, useRef, useEffect } from \"react\";\r\nimport Header from './header';\r\nimport './login/login.css';\r\n\r\nexport default function Registration() {\r\n    // Student And Alumni Details\r\n    const emailRef = useRef(\"\");\r\n    const passwdRef = useRef(\"\");\r\n    const fullNameRef = useRef(\"\");\r\n    const contactRef = useRef(\"\");\r\n    const courseRef = useRef(\"\");\r\n    const branchRef = useRef(\"\");\r\n    const addressRef = useRef(\"\");\r\n    const jobRef = useRef(\"\"); // Alumni\r\n    const jobLocationRef = useRef(\"\"); // Alumni\r\n    const passedOutYearRef = useRef(\"\"); // Alumni\r\n    const confirmPasswdRef = useRef(\"\");\r\n    const [userType, setUserType] = useState(1); // Default Student\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [passwdError, setPasswdError] = useState(\"\");\r\n    const [fullNameError, setFullNameError] = useState(\"\");\r\n    const [contactError, setContactError] = useState(\"\");\r\n    const [courseError, setCourseError] = useState(\"\");\r\n    const [branchError, setBranchError] = useState(\"\");\r\n    const [addressError, setAddressError] = useState(\"\");\r\n    const [jobError, setJobError] = useState(\"\");\r\n    const [jobLocationError, setJobLocationError] = useState(\"\");\r\n    const [confirmPasswdError, setConfirmPasswdError] = useState(\"\");\r\n    const [passedOutYearError, setPassedOutYearError] = useState(\"\");\r\n\r\n\r\n    // Validate Email Address\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"emailRef\": {\r\n                if (!emailRef || !emailRef.current || !emailRef.current.value || (emailRef && emailRef.current.value.trim() === \"\")) {\r\n                    setEmailError(\"Enter Email Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (!validateEmail(emailRef.current.value.trim())) {\r\n                    setEmailError(\"Invalid Email ID\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setEmailError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"passwdRef\": {\r\n                if (!passwdRef || !passwdRef.current || !passwdRef.current.value || (passwdRef && passwdRef.current.value.trim() === \"\")) {\r\n                    setPasswdError(\"Enter Password\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setPasswdError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"confirmPasswdRef\": {\r\n                if (!confirmPasswdRef || !confirmPasswdRef.current || !confirmPasswdRef.current.value || (confirmPasswdRef && confirmPasswdRef.current.value.trim() === \"\")) {\r\n                    setConfirmPasswdError(\"Confirm Password\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setConfirmPasswdError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"fullNameRef\": {\r\n                if (!fullNameRef || !fullNameRef.current || !fullNameRef.current.value || (fullNameRef && fullNameRef.current.value.trim() === \"\")) {\r\n                    setFullNameError(\"Enter Full Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setFullNameError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"contactRef\": {\r\n                if (!contactRef || !contactRef.current || !contactRef.current.value || (contactRef && contactRef.current.value.trim() === \"\")) {\r\n                    setContactError(\"Enter Contact Number\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setContactError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"courseRef\": {\r\n                if (!courseRef || !courseRef.current || !courseRef.current.value || (courseRef && courseRef.current.value.trim() === \"\")) {\r\n                    setCourseError(\"Enter Course Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setCourseError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"branchRef\": {\r\n                if (!branchRef || !branchRef.current || !branchRef.current.value || (branchRef && branchRef.current.value.trim() === \"\")) {\r\n                    setBranchError(\"Select Branch\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setBranchError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"addressRef\": {\r\n                if (!addressRef || !addressRef.current || !addressRef.current.value || (addressRef && addressRef.current.value.trim() === \"\")) {\r\n                    setAddressError(\"Enter Full Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setAddressError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"jobRef\": {\r\n                if (userType && userType == 2) {\r\n                    if (!jobRef || !jobRef.current || !jobRef.current.value || (jobRef && jobRef.current.value.trim() === \"\")) {\r\n                        setJobError(\"Enter Occupation\");\r\n                        errorCount = errorCount + 1;\r\n                    } else {\r\n                        setJobError(\"\");\r\n                    }\r\n                    if (refName !== \"all\") {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            case \"jobLocationRef\": {\r\n                if (userType && userType == 2) {\r\n                    if (!jobLocationRef || !jobLocationRef.current || !jobLocationRef.current.value || (jobLocationRef && jobLocationRef.current.value.trim() === \"\")) {\r\n                        setJobLocationError(\"Enter Job Location\");\r\n                        errorCount = errorCount + 1;\r\n                    } else {\r\n                        setJobLocationError(\"\");\r\n                    }\r\n                    if (refName !== \"all\") {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            case \"passedOutYearRef\": {\r\n                if (userType && userType == 2) {\r\n                    if (!passedOutYearRef || !passedOutYearRef.current || !passedOutYearRef.current.value || (passedOutYearRef && passedOutYearRef.current.value.trim() === \"\")) {\r\n                        setPassedOutYearError(\"Select PassedOut Year\");\r\n                        errorCount = errorCount + 1;\r\n                    } else {\r\n                        setPassedOutYearError(\"\");\r\n                    }\r\n                    if (refName !== \"all\") {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return errorCount === 0 ? true : false;\r\n\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            console.log(\"All fields are validated\");\r\n        }\r\n    }\r\n\r\n    const getTabClassName = (tabNumber) => {\r\n        return userType == tabNumber ? \" active\" : \"\";\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"userType\",userType);\r\n    },[userType]);\r\n    \r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"full-screen mxw-500\">\r\n\r\n                <div className=\"imgcontainer\">\r\n                    <h3>Register</h3>\r\n                </div>\r\n\r\n                {/** User Type Tabs */}\r\n\r\n                <div className=\"container\">\r\n                    {/** Nav tabs */}\r\n                    <ul className=\"nav nav-tabs nav-justified\" role=\"tablist\">\r\n                        <li className=\"nav-item\">\r\n                            <a className={\"nav-link\" + getTabClassName(1)} data-toggle=\"tab\" href=\"#tab1\" onClick={(e) => {\r\n                                console.log(e)\r\n                                setUserType(1)}}\r\n                                >Student</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className={\"nav-link\" + getTabClassName(2)} data-toggle=\"tab\" href=\"#tab1\" onClick={() => setUserType(2)}>Alumni</a>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    {/**  Tab panes */}\r\n                    <div className=\"tab-content\">\r\n                        <div id=\"tab1\" className=\"container tab-pane active\"><br />\r\n                            {/** Full Name */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Full Name</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Full Name\" name=\"uname\" ref={fullNameRef} onChange={() => formValidation('fullNameRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{fullNameError && fullNameError}</span>\r\n                            </div>\r\n\r\n                            {/** Email Address */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Email ID</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Email\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{emailError && emailError}</span>\r\n                            </div>\r\n\r\n                            {/** Course */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Course</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Course\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{courseError && courseError}</span>\r\n                            </div>\r\n                            {/** Contact no */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Contact No</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Contact Number\" name=\"uname\" ref={contactRef} onChange={() => formValidation('contactRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{contactError && contactError}</span>\r\n                            </div>\r\n\r\n                            {/** Address */}\r\n                            <div>\r\n                                <label htmlFor=\"uname\"><b>Address</b></label>\r\n                                <input type=\"text\" placeholder=\"Enter Address\" name=\"uname\" ref={addressRef} onChange={() => formValidation('addressRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{addressError && addressError}</span>\r\n                            </div>\r\n\r\n                            {/** Job */}\r\n                            {userType && userType == 2 &&\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Occupation</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Occupation\" name=\"uname\" ref={jobRef} onChange={() => formValidation('jobRef')} required autoComplete={\"off\"} />\r\n                                    <span className=\"error_msg\">{jobError && jobError}</span>\r\n                                </div>}\r\n\r\n                            {/** Job Location */}\r\n                            {userType && userType == 2 &&\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Job Location</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Job Location\" name=\"uname\" ref={jobLocationRef} onChange={() => formValidation('jobLocationRef')} required autoComplete={\"off\"} />\r\n                                    <span className=\"error_msg\">{jobLocationError && jobLocationError}</span>\r\n                                </div>}\r\n\r\n                            {/** Passed Out Year */} {/** Branch */}\r\n                            <>\r\n                                <div className=\"dropdown-signup\">\r\n                                    {userType && userType == 2 &&\r\n                                        <div className=\"btn-group\">\r\n                                            <button type=\"button\" className=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\">\r\n                                                PassedOut Year\r\n                                            </button>\r\n\r\n                                            <div className=\"dropdown-menu\">\r\n                                                {\r\n                                                    [2020, 2019, 2018, 2017, 2016].map((eachYear, index) => {\r\n                                                        return <p className=\"dropdown-item\" ref={passedOutYearRef} key={index}>{eachYear}</p>\r\n                                                    })\r\n                                                }\r\n\r\n                                            </div>\r\n                                        </div>}\r\n\r\n                                    <div className=\"btn-group\">\r\n                                        <button type=\"button\" className=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\">\r\n                                            Branch\r\n                                        </button>\r\n\r\n                                        <div className=\"dropdown-menu\">\r\n                                            {\r\n                                                [\"CSE\", \"ECE\", \"EEE\", \"CE\", \"ME\"].map((eachBranch, index) => {\r\n                                                    return <p className=\"dropdown-item\" ref={branchRef} key={index}>{eachBranch}</p>\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-signup\">\r\n                                    <span className=\"error_msg\">{passedOutYearError && passedOutYearError}</span>\r\n                                    <span className=\"error_msg\">{branchError && branchError}</span>\r\n                                </div> </>\r\n\r\n                            {/** Password */}\r\n                            <div>\r\n                                <label htmlFor=\"psw\"><b>Password</b></label>\r\n                                <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" ref={passwdRef} onChange={() => formValidation('passwdRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{passwdError && passwdError}</span>\r\n                            </div>\r\n                            {/** Confirm Password */}\r\n                            <div>\r\n                                <label htmlFor=\"psw\"><b>Confirm Password</b></label>\r\n                                <input type=\"password\" placeholder=\"Confirm Password\" name=\"psw\" ref={confirmPasswdRef} onChange={() => formValidation('confirmPasswdRef')} required autoComplete={\"off\"} />\r\n                                <span className=\"error_msg\">{confirmPasswdError && confirmPasswdError}</span>\r\n                            </div>\r\n\r\n                            <button type=\"submit\" onClick={() => handleSubmit()}>Signup</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}","import Header from \"./header\";\r\n\r\nexport default function PageNotFound() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div>\r\n                <h2>404 !! Page Not Found</h2>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useRef, useState } from \"react\";\r\nexport default function CreateJob() {\r\n    // Student And Alumni Details\r\n    const companyNameRef = useRef(\"\");\r\n    const locationRef = useRef(\"\");\r\n    const experienceRef = useRef(\"\");\r\n    const skillsRef = useRef(\"\");\r\n    const packageRef = useRef(\"\");\r\n    const [companyNameError, setCompanyNameError] = useState(\"\");\r\n    const [locationError, setLocationError] = useState(\"\");\r\n    const [experienceError, setExperienceError] = useState(\"\");\r\n    const [skillsError, setSkillsError] = useState(\"\");\r\n    const [packageError, setPackageError] = useState(\"\");\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"companyNameRef\": {\r\n                if (!companyNameRef || !companyNameRef.current || !companyNameRef.current.value || (companyNameRef && companyNameRef.current.value.trim() === \"\")) {\r\n                    setCompanyNameError(\"Enter Company Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setCompanyNameError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"locationRef\": {\r\n                if (!locationRef || !locationRef.current || !locationRef.current.value || (locationRef && locationRef.current.value.trim() === \"\")) {\r\n                    setLocationError(\"Enter Location\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setLocationError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"experienceRef\": {\r\n                if (!experienceRef || !experienceRef.current || !experienceRef.current.value || (experienceRef && experienceRef.current.value.trim() === \"\")) {\r\n                    setExperienceError(\"Enter Required Experience\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setExperienceError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"skillsRef\": {\r\n                if (!skillsRef || !skillsRef.current || !skillsRef.current.value || (skillsRef && skillsRef.current.value.trim() === \"\")) {\r\n                    setSkillsError(\"Enter Skills \");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setSkillsError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"packageRef\": {\r\n                if (!packageRef || !packageRef.current || !packageRef.current.value || (packageRef && packageRef.current.value.trim() === \"\")) {\r\n                    setPackageError(\"Enter Package\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setPackageError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            console.log(\"All fields are validated\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/**<!-- The Modal -->*/}\r\n            <div className=\"modal\" id=\"myModal\">\r\n                <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                    <div className=\"modal-content\">\r\n\r\n                        {/**<!-- Modal Header -->*/}\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title width-webkit\">Post A Job</h1>\r\n                            <button type=\"button\" className=\"close width-max\" data-dismiss=\"modal\">×</button>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal body -->*/}\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"container\">\r\n                                {/** Company Name */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Company Name</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Company Name\" name=\"uname\" ref={companyNameRef} onChange={() => formValidation('companyNameRef')} required />\r\n                                    <span className=\"error_msg\">{companyNameError && companyNameError}</span>\r\n                                </div>\r\n\r\n                                {/** Company Location */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>Location</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Company's Location\" name=\"psw\" ref={locationRef} onChange={() => formValidation('locationRef')} required />\r\n                                    <span className=\"error_msg\">{locationError && locationError}</span>\r\n                                </div>\r\n\r\n                                {/** Experience */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>Experience</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Experience\" name=\"psw\" ref={experienceRef} onChange={() => formValidation('experienceRef')} required />\r\n                                    <span className=\"error_msg\">{experienceError && experienceError}</span>\r\n                                </div>\r\n                                {/** Skills */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>Skills</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter skills\" name=\"psw\" ref={skillsRef} onChange={() => formValidation('skillsRef')} required />\r\n                                    <span className=\"error_msg\">{skillsError && skillsError}</span>\r\n                                </div>\r\n                                {/** Package */}\r\n                                <div>\r\n                                    <label htmlFor=\"psw\"><b>CTC</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter CTC P.A.\" name=\"psw\" ref={packageRef} onChange={() => formValidation('packageRef')} required />\r\n                                    <span className=\"error_msg\">{packageError && packageError}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal footer -->*/}\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"submit\" className=\"btn btn-success btn-popup\" onClick={() => handleSubmit()}>Post</button>\r\n                            <button type=\"button\" className=\"btn btn-danger btn-popup\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useRef, useState } from \"react\";\r\nimport './jobs.css';\r\nexport default function ApplyJob() {\r\n    // Student And Alumni Details\r\n    const resumeRef = useRef(\"\");\r\n    const emailRef = useRef(\"\");\r\n    const fullNameRef = useRef(\"\");\r\n    const contactRef = useRef(\"\");\r\n\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [fullNameError, setFullNameError] = useState(\"\");\r\n    const [contactError, setContactError] = useState(\"\");\r\n    const [resumeError, setResumeError] = useState(\"\");\r\n\r\n    // Validate Email Address\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    const formValidation = (refName) => {\r\n        let errorCount = 0;\r\n        switch (refName) {\r\n            case 'all': {\r\n\r\n            }\r\n            case \"emailRef\": {\r\n                if (!emailRef || !emailRef.current || !emailRef.current.value || (emailRef && emailRef.current.value.trim() === \"\")) {\r\n                    setEmailError(\"Enter Email Address\");\r\n                    errorCount = errorCount + 1;\r\n                } else if (!validateEmail(emailRef.current.value.trim())) {\r\n                    setEmailError(\"Invalid Email ID\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setEmailError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"fullNameRef\": {\r\n                if (!fullNameRef || !fullNameRef.current || !fullNameRef.current.value || (fullNameRef && fullNameRef.current.value.trim() === \"\")) {\r\n                    setFullNameError(\"Enter Full Name\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setFullNameError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"contactRef\": {\r\n                if (!contactRef || !contactRef.current || !contactRef.current.value || (contactRef && contactRef.current.value.trim() === \"\")) {\r\n                    setContactError(\"Enter Contact Number\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setContactError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n            case \"resumeRef\": {\r\n                if (!resumeRef || !resumeRef.current || !resumeRef.current.value || (resumeRef && resumeRef.current.value.trim() === \"\")) {\r\n                    setResumeError(\"Please Upload Resume\");\r\n                    errorCount = errorCount + 1;\r\n                } else {\r\n                    setResumeError(\"\");\r\n                }\r\n                if (refName !== \"all\") {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValidation('all')) {\r\n            console.log(\"All fields are validated\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/**<!-- The Modal -->*/}\r\n            <div className=\"modal\" id=\"myModal\">\r\n                <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                    <div className=\"modal-content\">\r\n\r\n                        {/**<!-- Modal Header -->*/}\r\n                        <div className=\"modal-header\">\r\n                            <div className=\"width-webkit\">\r\n                                <h1 className=\"modal-title\">Apply For Job</h1>\r\n                            </div>\r\n                            <button type=\"button\" className=\"close width-fit\" data-dismiss=\"modal\">×</button>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal body -->*/}\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"container\">\r\n                                {/** Full Name */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Full Name</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Full Name\" name=\"uname\" ref={fullNameRef} onChange={() => formValidation('fullNameRef')} required />\r\n                                    <span className=\"error_msg\">{fullNameError && fullNameError}</span>\r\n                                </div>\r\n\r\n                                {/** Email Address */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Email ID</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Email\" name=\"uname\" ref={emailRef} onChange={() => formValidation('emailRef')} required />\r\n                                    <span className=\"error_msg\">{emailError && emailError}</span>\r\n                                </div>\r\n\r\n                                {/** Contact no */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Contact No</b></label>\r\n                                    <input type=\"text\" placeholder=\"Enter Contact Number\" name=\"uname\" ref={contactRef} onChange={() => formValidation('contactRef')} required />\r\n                                    <span className=\"error_msg\">{contactError && contactError}</span>\r\n                                </div>\r\n                                {/** Resume Upload */}\r\n                                <div>\r\n                                    <label htmlFor=\"uname\"><b>Resume</b></label>\r\n                                    <label htmlFor=\"formFileSm\" className=\"form-label\"></label>\r\n                                    <input className=\"form-control form-control-sm\" id=\"formFileSm\" type=\"file\" rerf={resumeRef} />\r\n                                    <span className=\"error_msg\">{resumeError && resumeError}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/**<!-- Modal footer -->*/}\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"submit\" className=\"btn btn-success btn-popup\" onClick={() => handleSubmit()}>Apply</button>\r\n                            <button type=\"button\" className=\"btn btn-danger btn-popup\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useState } from \"react\";\r\nimport Header from \"../header\";\r\nimport './jobs.css';\r\nimport CreateJob from \"./createJob\";\r\nimport ApplyJob from \"./applyJob\";\r\n\r\nexport default function Jobs() {\r\n    const [openCreateJobPopup, setOpenCreateJobPopup] = useState(false);\r\n    const [openApplyJobPopup, setOpenApplyJobPopup] = useState(false);\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"container jobs\">\r\n                <h2>Job Openings</h2>\r\n                <button type=\"button\" className=\"btn btn-primary width-max\" data-toggle=\"modal\" data-target=\"#myModal\" onClick={() => setOpenCreateJobPopup(!openCreateJobPopup)}>Post A Job</button>\r\n                <div className=\"each-job\">\r\n                    <div className=\"job-header\">\r\n                        <h4 className=\"posted-by\">Posted By Haritha</h4>\r\n                        <button type=\"button\" className=\"btn btn-primary width-max\" data-toggle=\"modal\" data-target=\"#myModal\" onClick={() => setOpenApplyJobPopup(!openApplyJobPopup)}>Apply For Job</button>\r\n                    </div>\r\n                    <div className=\"job-data\">\r\n                        <p className=\"job-data-detail\">Tcs</p>\r\n                        <p className=\"job-data-detail\">Hyderabad</p>\r\n                        <p className=\"job-data-detail\">5 Years Exp</p>\r\n                        <p className=\"job-data-detail\">Key Skills: C,Python</p>\r\n                        <p className=\"job-data-detail\">Pay Scale: 3.6 LPA</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"each-job\">\r\n                    <div className=\"job-header\">\r\n                        <h4 className=\"posted-by\">Posted By Haritha</h4>\r\n                        <button type=\"button\" className=\"btn btn-primary width-max\" data-toggle=\"modal\" data-target=\"#myModal\" onClick={() => setOpenApplyJobPopup(!openApplyJobPopup)}>Apply For Job</button>\r\n                    </div>\r\n                    <div className=\"job-data\">\r\n                        <p className=\"job-data-detail\">Tcs</p>\r\n                        <p className=\"job-data-detail\">Hyderabad</p>\r\n                        <p className=\"job-data-detail\">5 Years Exp</p>\r\n                        <p className=\"job-data-detail\">Key Skills: C,Python</p>\r\n                        <p className=\"job-data-detail\">Pay Scale: 3.6 LPA</p>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            {openCreateJobPopup && <CreateJob />}\r\n            {openApplyJobPopup && <ApplyJob />}\r\n        </>\r\n    );\r\n}","import { createBrowserHistory } from 'history';\r\nexport default createBrowserHistory(); ","import * as React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Route,\r\n    Switch,\r\n    Redirect,\r\n} from 'react-router-dom';\r\nimport UserLogin from './login/login';\r\nimport App from './App';\r\nimport About from './about';\r\nimport Registration from './register';\r\nimport PageNotFound from './pageNotFound';\r\nimport Jobs from './jobs/jobs';\r\nimport history from './history';\r\n\r\nclass Routes extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <Switch>\r\n                    <Route exact path='/' component={App}></Route>\r\n                    <Route exact path='/about' component={About}></Route>\r\n                    <Route exact path='/register' component={Registration}></Route>\r\n                    <Route exact path='/login' component={UserLogin}></Route>\r\n                    <Route exact path='/jobs' component={Jobs}></Route>\r\n                    <Route exact path='/pageNotFound' component={PageNotFound}></Route>\r\n                    <Redirect to=\"/pageNotFound\"></Redirect>\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Routes;","const initialState={\r\n    isLoggedIn: false\r\n};\r\n\r\nconst LoginReducer=(state=initialState, action)=>{\r\n    switch(action.type){\r\n        case \"USER_LOGIN\":{\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.payLoad\r\n            }\r\n        }\r\n        case \"USER_LOGOUT\":{\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.payLoad\r\n            }\r\n        }\r\n        default:{\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\nexport default LoginReducer;","import LoginReducer from \"./loginReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst RootReducer = combineReducers({\r\n    login: LoginReducer\r\n});\r\n\r\nexport default RootReducer;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Routes from './route';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport RootReducer from './rootReducer';\r\nimport { createStore } from 'redux';\r\n\r\n\r\n//root element of the project\r\nconst rootElement = document.getElementById('root');\r\n\r\n//Create Store\r\nconst store = createStore(RootReducer);\r\n\r\nexport function renderApp() {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <Routes />\r\n        </Provider>)\r\n}\r\nrender(renderApp(), (rootElement));\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}